// Generated by CoffeeScript 1.8.0
(function() {
  var AsciiAdventure, random;

  random = function(limit) {
    return Math.floor(Math.random() * limit);
  };

  AsciiAdventure = (function() {
    function AsciiAdventure() {}

    AsciiAdventure.prototype.mapSize = {
      x: 100,
      y: 100
    };

    AsciiAdventure.prototype.tileMap = [
      {
        style: 'grass',
        text: '"',
        move: 1
      }, {
        style: 'water',
        text: '~',
        move: 10
      }, {
        style: 'tree',
        text: 'Y',
        move: 1000
      }, {
        style: 'stone',
        text: '#',
        move: 1000
      }
    ];

    AsciiAdventure.prototype.curPos = {
      x: 50,
      y: 50
    };

    AsciiAdventure.prototype.windowSize = {
      x: 11,
      y: 11
    };

    AsciiAdventure.prototype.protagonist = {
      stamina: 100,
      health: 10,
      defence: 5,
      offence: 5
    };

    AsciiAdventure.prototype.startMap = [];

    AsciiAdventure.prototype.genRiver = function(map) {
      var adjust, direction, length, maxLength, pos, weightedXAdjust, weightedYAdjust, _results;
      length = 0;
      maxLength = 100;
      pos = {
        x: random(this.mapSize.x),
        y: random(this.mapSize.y)
      };
      direction = {
        deltaX: random(2) - 1,
        deltaY: random(2) - 1
      };
      weightedXAdjust = [direction.deltaX, 0, -1, 1];
      weightedYAdjust = [direction.deltaY, 0, -1, 1];
      _results = [];
      while (pos.x > 0 && pos.x < this.mapSize.x && pos.y > 0 && pos.y < this.mapSize.y && length < maxLength) {
        map[pos.y][pos.x] = 1;
        adjust = {
          deltaX: random(2) - 1,
          deltaY: random(2) - 1
        };
        pos.x = pos.x + weightedXAdjust[random(weightedXAdjust.length)];
        pos.y = pos.y + weightedYAdjust[random(weightedYAdjust.length)];
        _results.push(length++);
      }
      return _results;
    };

    AsciiAdventure.prototype.genRandomMap = function() {
      var map, weightedLookup, _i, _ref;
      weightedLookup = [0, 0, 2];
      map = (function() {
        var _i, _ref, _results;
        _results = [];
        for (_i = 0, _ref = this.mapSize.y; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (_j = 0, _ref1 = this.mapSize.x; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--) {
              _results1.push(weightedLookup[random(3)]);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      for (_i = 0, _ref = (random(5) + 1) * 3; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        this.genRiver(map);
      }
      return map;
    };

    AsciiAdventure.prototype.windowLeft = function() {
      return this.curPos.x - Math.floor(this.windowSize.x / 2);
    };

    AsciiAdventure.prototype.windowRight = function() {
      return this.curPos.x + Math.floor(this.windowSize.x / 2);
    };

    AsciiAdventure.prototype.windowTop = function() {
      return this.curPos.y - Math.floor(this.windowSize.y / 2);
    };

    AsciiAdventure.prototype.windowBottom = function() {
      return this.curPos.y + Math.floor(this.windowSize.y / 2);
    };

    AsciiAdventure.prototype.getCurPosCell = function() {
      return $('.row' + this.curPos.y + ' .col' + this.curPos.x);
    };

    AsciiAdventure.prototype.drawCurPos = function() {
      var cell, cellTile;
      cell = this.getCurPosCell();
      cellTile = this.lookupTile(this.curPos.x, this.curPos.y);
      cell.removeClass(cellTile.style);
      cell.addClass('curPos');
      return cell.text('U');
    };

    AsciiAdventure.prototype.movePos = function(deltaX, deltaY) {
      var oldCell, oldCellTile;
      oldCellTile = this.lookupTile(this.curPos.x, this.curPos.y);
      oldCell = this.getCurPosCell();
      oldCell.removeClass('curPos');
      oldCell.addClass(oldCellTile.style);
      oldCell.text(oldCellTile.text);
      this.curPos.x += deltaX;
      this.curPos.y += deltaY;
      return this.drawCurPos();
    };

    AsciiAdventure.prototype.lookupTile = function(x, y) {
      return this.tileMap[this.startMap[y][x]];
    };

    AsciiAdventure.prototype.canMove = function(deltaX, deltaY) {
      var tile;
      tile = this.lookupTile(this.curPos.x + deltaX, this.curPos.y + deltaY);
      return tile.move <= this.protagonist.stamina;
    };

    AsciiAdventure.prototype.createTileCell = function(x, tile) {
      return $('<span>').addClass('tile').addClass(tile.style).addClass('col' + x).text(tile.text);
    };

    AsciiAdventure.prototype.createTileRow = function(y) {
      var row, tile, tileRow, x, _i, _ref, _ref1;
      tileRow = this.startMap[y];
      row = $('<div>').addClass('mapRow').addClass('row' + y);
      for (x = _i = _ref = this.windowLeft(), _ref1 = this.windowRight(); _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
        tile = this.lookupTile(x, y);
        row.append(this.createTileCell(x, tile));
      }
      return row;
    };

    AsciiAdventure.prototype.drawTiles = function() {
      var map, row, y, _i, _ref, _ref1;
      map = $('<div>').addClass('map');
      for (y = _i = _ref = this.windowTop(), _ref1 = this.windowBottom(); _ref <= _ref1 ? _i < _ref1 : _i > _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
        row = this.createTileRow(y);
        map.append(row);
      }
      return $('#mapContainer').html(map);
    };

    AsciiAdventure.prototype.drawMap = function() {
      this.drawTiles();
      return this.drawCurPos();
    };

    AsciiAdventure.prototype.moveMapDown = function() {
      if (this.canMove(0, -1)) {
        $('.row' + this.windowBottom()).remove();
        this.movePos(0, -1);
        return $('.map').prepend(this.createTileRow(this.windowTop()));
      }
    };

    AsciiAdventure.prototype.moveMapUp = function() {
      if (this.canMove(0, 1)) {
        $('.row' + this.windowTop()).remove();
        this.movePos(0, 1);
        return $('.map').append(this.createTileRow(this.windowBottom()));
      }
    };

    AsciiAdventure.prototype.moveMapLeft = function() {
      var mapRow, rightCol;
      if (this.canMove(1, 0)) {
        $('.col' + this.windowLeft()).remove();
        this.movePos(1, 0);
        rightCol = this.windowRight();
        mapRow = $('.mapRow');
        return mapRow.each((function(_this) {
          return function(i) {
            var row, rowNum, tile;
            row = mapRow[i];
            rowNum = row.className.match(/row(\d+)/)[1];
            tile = _this.lookupTile(rightCol, rowNum);
            return $(row).append(_this.createTileCell(rightCol, tile));
          };
        })(this));
      }
    };

    AsciiAdventure.prototype.moveMapRight = function() {
      var leftCol, mapRow;
      if (this.canMove(-1, 0)) {
        $('.col' + this.windowRight()).remove();
        this.movePos(-1, 0);
        leftCol = this.windowLeft();
        mapRow = $('.mapRow');
        return mapRow.each((function(_this) {
          return function(i) {
            var row, rowNum, tile;
            row = mapRow[i];
            rowNum = row.className.match(/row(\d+)/)[1];
            tile = _this.lookupTile(leftCol, rowNum);
            return $(row).prepend(_this.createTileCell(leftCol, tile));
          };
        })(this));
      }
    };

    AsciiAdventure.prototype.handleKeyPress = function(evt) {
      switch (evt.key) {
        case "Up":
          return this.moveMapDown();
        case "Down":
          return this.moveMapUp();
        case "Right":
          return this.moveMapLeft();
        case "Left":
          return this.moveMapRight();
      }
    };

    AsciiAdventure.prototype.init = function() {
      this.startMap = this.genRandomMap();
      this.drawMap();
      return $("#top").on("keypress", (function(_this) {
        return function(e) {
          return _this.handleKeyPress(e);
        };
      })(this));
    };

    return AsciiAdventure;

  })();

  $(window).load(function() {
    window.aa = new AsciiAdventure();
    return window.aa.init();
  });

}).call(this);
